{{- $releaseName := .Release.Name -}}
{{- $chartName := include "heartbeat-manager.name" . -}}
{{- $cloudProviderFlavor := include "heartbeat-manager.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "heartbeat-manager.cloudProviderDockerRegistryUrl" . -}}
{{- $cloudProviderImagePullSecretName := include "heartbeat-manager.cloudProviderImagePullSecretName" . -}}
{{ $postgresSecretName := ternary .Values.global.db.secrets.externalSecretName (printf "%s%s" .Release.Name "-postgres-secret") .Values.global.db.secrets.useExternal }}
{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $releaseName }}-{{ $chartName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "heartbeat-manager.environment" . }}
    release: {{ $releaseName }}
    {{- include "heartbeat-manager.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $releaseName }}-{{ $chartName }}
      {{- include "heartbeat-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $releaseName }}-{{ $chartName }}
        {{- include "heartbeat-manager.selectorLabels" . | nindent 8 }}
    spec:
      {{- if $cloudProviderImagePullSecretName }}
      imagePullSecrets:
        - name: {{ $cloudProviderImagePullSecretName | quote }}
      {{- end }}
      containers:
        - name: {{ $releaseName }}-{{ $chartName }}-deployment
          {{- with .Values.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ .tag }}
          {{- end }}
          env:
            - name: SERVER_PORT
              value: {{ .Values.env.targetPort | quote }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: password
          envFrom:
            - configMapRef:
                name: {{ $releaseName }}-{{ $chartName }}-configmap
          ports:
            - name: http
              containerPort: {{ .Values.env.targetPort }}
              protocol: {{ .Values.env.protocol }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            httpGet:
              path: /liveness
              port: {{ .Values.env.targetPort }}
          {{- if .Values.resources.enabled }}
          resources:
            {{- toYaml .Values.resources.value | nindent 12 }}
          {{- end }}
          volumeMounts:
          {{- if .Values.global.db.sslEnabled }}
            - mountPath: {{ .Values.env.db.ssl.CA_DIR }}
              name: ca-file
            - mountPath: {{ .Values.env.db.ssl.KEY_DIR }}
              name: key-file
            - mountPath: {{ .Values.env.db.ssl.CERT_DIR }}
              name: cert-file
          {{- end }}
      volumes:
        {{- if .Values.global.db.sslEnabled }}
          - name: ca-file
            secret:
              secretName: {{ $postgresSecretName }}
              items:
                - key: caFile
                  path: ca.pem
          - name: key-file
            secret:
              secretName: {{ $postgresSecretName }}
              items:
                - key: keyFile
                  path: key.pem
          - name: cert-file
            secret:
              secretName: {{ $postgresSecretName }}
              items:
                - key: certFile
                  path: cert.pem
        {{- end }}
{{- end -}}
